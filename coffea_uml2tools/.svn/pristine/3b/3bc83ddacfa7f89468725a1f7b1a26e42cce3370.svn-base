package net.sourceforge.coffea.uml2tools.editors;

import java.lang.reflect.InvocationTargetException;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sourceforge.coffea.uml2.Resources;
import net.sourceforge.coffea.uml2.model.IASTNodeHandling;
import net.sourceforge.coffea.uml2.model.IAttributeHandling;
import net.sourceforge.coffea.uml2.model.IClassHandling;
import net.sourceforge.coffea.uml2.model.IClassifierHandling;
import net.sourceforge.coffea.uml2.model.IContainableElementHandling;
import net.sourceforge.coffea.uml2.model.IElementHandling;
import net.sourceforge.coffea.uml2.model.IMemberHandling;
import net.sourceforge.coffea.uml2.model.IMethodHandling;
import net.sourceforge.coffea.uml2.model.IModelHandling;
import net.sourceforge.coffea.uml2.model.IPackageHandling;
import net.sourceforge.coffea.uml2.model.creation.IModelBuilding;
import net.sourceforge.coffea.uml2.model.impl.ClassHandler;
import net.sourceforge.coffea.uml2.model.impl.OperationHandler;
import net.sourceforge.coffea.uml2.model.impl.PackageHandler;
import net.sourceforge.coffea.uml2.model.impl.PropertyHandler;
import net.sourceforge.coffea.uml2tools.editors.policies
.OpenUMLClassDiagramJavaEditPolicy;
import net.sourceforge.coffea.uml2tools.editors.policies
.OpenUMLClassJavaEditPolicy;
import net.sourceforge.coffea.uml2tools.handlers.EditionHandler;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.ResourceSetListener;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.impl.DiagramImpl;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorSite;
import org.eclipse.ui.ISelectionListener;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.uml2.diagram.clazz.edit.parts.Class2EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Class3EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Class4EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.ClassEditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Package2EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Package3EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Package4EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.Package6EditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.PackageAsFrameEditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.PackageEditPart;
import org.eclipse.uml2.diagram.clazz.edit.parts.UMLEditPartFactory;
import org.eclipse.uml2.diagram.clazz.part.UMLDiagramEditor;
import org.eclipse.uml2.diagram.clazz.part.UMLDiagramEditorPlugin;
import org.eclipse.uml2.uml.Class;
import org.eclipse.uml2.uml.NamedElement;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.Property;

/** 
 * Class diagram editor synchronizing Java code on structural UML elements 
 * edition 
 */
public class UMLClassDiagramJavaEditor 
extends UMLDiagramEditor 
implements ISelectionListener, ISelectionProvider {

	/** Editor identifier */
	public static final String ID = 
		Resources.getParameter("constants.editorId");

	/** Worker linking the UML model and the Java source */
	protected IModelBuilding creator;

	/** 
	 * Boolean value indicating if the editor has been correctly 
	 * initialized
	 */
	protected boolean initialized;

	/** 
	 * Table of listeners listening to diagram elements changes, the key for 
	 * each element is its name
	 */
	protected Map<String, ResourceSetListener> listeners;

	/**
	 * Table of UML elements edit policies. Each element having only one edit 
	 * policy, the key for this policy is the element itself
	 */
	protected Map<EditPart, EditPolicy> editPolicies;

	/** EMF editing domain */
	protected TransactionalEditingDomain editingDomain;

	/** UML edit part factory */
	protected EditPartFactory factory;

	/** Handler for the last selected element */
	protected IElementHandling lastSelectedElementHandler;

	/** Main package edit part */
	protected PackageEditPart mainPackagePart;

	/** UML elements modifications listeners initialization */
	protected void initListeners() {
		EditPart p = getDiagramEditPart();
		if((p!=null)&&(p instanceof IGraphicalEditPart)) {
			IGraphicalEditPart g = (IGraphicalEditPart)p;
			editingDomain = g.getEditingDomain();
			Diagram d = null;
			Object m = g.getModel();
			String name = null;
			if((m!=null)&&(m instanceof Diagram)) {
				d = (Diagram)m;
				EObject eo = d.getElement();
				if(eo instanceof Package) {
					name = 
						PackageHandler.buildFullyQualifiedName(
								(Package)eo
						);

				}
				else if(eo instanceof Class) {
					Class cl = (Class)eo;
					name = 
						ClassHandler.buildFullyQualifiedName(
								cl
						);
				}
				if(name!=null) {
					TransactionalEditingDomain domain = 
						g.getEditingDomain();
					if(listeners.get(name)==null) {
						IElementHandling elH = findHandler(g);
						if(elH!=null) {
							domain.addResourceSetListener(elH);
							listeners.put(name, elH);
						}
					}
					else {
						domain = null;
					}
					listenToChildren(g, name);
				}
			}
			/*
			List<?> l = p.getChildren();
			if(l!=null) {
				IGraphicalEditPart g = null;
				Node n = null;
				Object o = null;
				Object m = null;
				String name = null;
				for(int i=0 ; i<l.size() ; i++) {
					o = l.get(i);
					if((o!=null)&&(o instanceof IGraphicalEditPart)) {
						name = null;
						g = (IGraphicalEditPart)o;
						m = g.getModel();
						if((m!=null)&&(m instanceof Node)) {
							n = (Node)m;
							EObject eo = n.getElement();
							if(eo instanceof Package) {
								name = 
									PackageHandler.resolveFullyQualifiedName(
											(Package)eo
									);

							}
							else if(eo instanceof Class) {
								Class cl = (Class)eo;
								name = 
									ClassHandler.resolveFullyQualifiedName(
											cl
									);
							}
							if(name!=null) {
								TransactionalEditingDomain domain = 
									g.getEditingDomain();
								if(listeners.get(name)==null) {
									IElementHandling elH = findHandler(g);
									if(elH!=null) {
										domain.addResourceSetListener(elH);
										g.addEditPartListener(elH);
										listeners.put(name, elH);
									}
								}
								else {
									domain = null;
								}
								listenToChildren(g, name);
							}
						}
					}
				}
			}
			 */
		}
	}

	/**
	 * Returns an element handler from the model provided by {@link #creator}
	 * @param name
	 * Name of the element to return the handler for
	 * @return Element handler responding to the given element name
	 */
	protected IElementHandling getElementHandler(String name) {
		IModelHandling mdl = null;
		IElementHandling rt = null;
		if(creator!=null) {
			mdl = creator.getModelHandler();
			if(mdl!=null) {
				rt = mdl.getElementHandler(name);
				if(rt==null) {
					IElementHandling defaultPackageElement = 
						mdl.getElementHandler(
								IModelHandling.defaultPackageFileName
						);
					if(defaultPackageElement instanceof IPackageHandling) {
						rt = 
							((IPackageHandling)defaultPackageElement)
							.getElementHandler(name);
					}
				}
			}
		}
		return rt;
	}

	/**
	 * Ensures the correct edit policy has been installed on an edit part
	 * @param p
	 * Edit part on which the policy installation must be ensured
	 * @param elH
	 * Element handler for which the installation could be done
	 */
	protected void ensureEditPolicy(
			EditPart p, 
			IElementHandling elH
	) {
		if((editPolicies!=null)&&(elH!=null)) {
			// We try to get the element edit policy
			EditPolicy policy = editPolicies.get(p);
			// If we don't have a policy,
			if(policy==null) {
				// Then we try to install one
				if(elH instanceof IPackageHandling) {
					if(p instanceof PackageEditPart) {
						PackageEditPart packPart = (PackageEditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);

					}
					else if(p instanceof Package2EditPart) {
						Package2EditPart packPart = (Package2EditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Package3EditPart) {
						Package3EditPart packPart = (Package3EditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Package4EditPart) {
						Package4EditPart packPart = (Package4EditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Package6EditPart) {
						Package6EditPart packPart = (Package6EditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof PackageAsFrameEditPart) {
						PackageAsFrameEditPart packPart = 
							(PackageAsFrameEditPart)p;
						packPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassDiagramJavaEditPolicy();
						packPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
				}
				if(elH instanceof IClassHandling<?, ?>) {
					IClassHandling<?, ?> clH = (IClassHandling<?, ?>)elH;
					if(p instanceof ClassEditPart) {
						ClassEditPart classPart = (ClassEditPart)p;
						classPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassJavaEditPolicy(clH);
						classPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Class2EditPart) {
						Class2EditPart classPart = (Class2EditPart)p;
						classPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassJavaEditPolicy(clH);
						classPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Class3EditPart) {
						Class3EditPart classPart = (Class3EditPart)p;
						classPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassJavaEditPolicy(clH);
						classPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
					else if(p instanceof Class4EditPart) {
						Class4EditPart classPart = (Class4EditPart)p;
						/*
						EditPart comment = 
							factory.createEditPart(
									classPart, 
									UMLElementTypes.Comment_2018
							);
						 */
						classPart.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
						policy = new OpenUMLClassJavaEditPolicy(clH);
						classPart.installEditPolicy(
								EditPolicyRoles.OPEN_ROLE, 
								policy
						);
					}
				}
				// If we have installed an edit policy, 
				if(policy!=null) {
					// Then we register it
					editPolicies.put(p, policy);
				}
			}
		}
		else {
			p.removeEditPolicy(EditPolicyRoles.OPEN_ROLE);
		}
	}

	/**
	 * Listens to and edit part children resources changes
	 * @param p
	 * Parent edit part which children must be listened to
	 * @param name
	 * Parent edit part resource name
	 */
	protected void listenToChildren(EditPart p, String name) {
		List<?> children = p.getChildren();
		if(children!=null) {
			Object child = null;
			EditPart childEditPart = null;
			String childName = null;
			NamedElement childElement = null;
			Node childModel = null;
			IElementHandling childH = null;
			for(int i=0 ; i<children.size() ; i++) {
				child = children.get(i);
				if((child!=null)&&(child instanceof EditPart)) {
					childEditPart = (EditPart)child;
					if(childEditPart.getModel() instanceof Node) {
						childModel = (Node)childEditPart.getModel();
						if(
								childModel.getElement() 
								instanceof NamedElement
						) {
							childElement = 
								(NamedElement)childModel.getElement();
							childName = 
								name 
								+ 
								Resources.getParameter(
										"constants.editingFileNamePrefix"
								)
								+ childElement.getName();
							childH = getElementHandler(childName);
							if(
									(
											childEditPart instanceof 
											IGraphicalEditPart
									)&&
									(childH!=null)
							) {	
								IGraphicalEditPart graphicalPart = 
									((IGraphicalEditPart)childEditPart);
								TransactionalEditingDomain domain = 
									graphicalPart.getEditingDomain();
								if(listeners.get(name)==null) {
									domain.addResourceSetListener(childH);
									listeners.put(name, childH);
								}
								else {
									domain = null;
								}
							}
						}
					}
					listenToChildren(childEditPart, childName);
				}
			}
		}
	}

	/**
	 * Sets {@link #creator}
	 * @param w
	 * Value of {@link #creator}
	 */
	public void setWorker(IModelBuilding w) {
		creator = w;
		initListeners();
		initEditPolicy(getDiagramEditPart());
	}

	/**
	 * Returns {@link #lastSelectedElementHandler}
	 * @return Value of {@link #lastSelectedElementHandler}
	 */
	public IElementHandling getLastSelectedElementHandler() {
		return lastSelectedElementHandler;
	}

	/**
	 * Initializes the edit policy for an edit part (recursive)
	 * @param p
	 * Edit part for which the edit policy must be initialized
	 */
	private void initEditPolicy(EditPart p) {
		if(p!=null) {
			IElementHandling elH = 
				findHandler(p);
			ensureEditPolicy(p, elH);
			if((mainPackagePart == null)&&(p instanceof PackageEditPart)) {
				mainPackagePart = (PackageEditPart)p;
			}
			/*
			if(elH instanceof IASTNodeHandling<?, ?>) {
				IASTNodeHandling<?, ?> nodeH = (IASTNodeHandling<?, ?>)elH;
				IJavaElement el = nodeH.getJavaElement();
				if(el != null) {
					try {
						String doc = 
							el.getAttachedJavadoc(new NullProgressMonitor());
						if((doc != null) && (mainPackagePart != null)) {
							NoteEditPart note = 
								new NoteEditPart(
										mainPackagePart.getDiagramView()
								);
							mainPackagePart.getChildren().add(note);
						}
					} catch (JavaModelException e) {
						e.printStackTrace();
					}
				}
			}
			*/
			List<?> children = p.getChildren();
			if(children!=null) {
				Object o = null;
				for(int i=0 ; i<children.size() ; i++) {
					o = children.get(i);
					if(o instanceof EditPart) {
						initEditPolicy((EditPart)o);
					}
				}
			}
		}
	}

	/**
	 * Finds the element handler for an edit part
	 * @param p
	 * Edit part for which a handler must be found
	 * @return Handler corresponding to the given edit part
	 */
	public IElementHandling findHandler(EditPart p) {
		Class classSel = null;
		Property propSel = null;
		Operation opSel = null;
		Package packSel = null;
		String name = new String();
		// We get the underlying UML element in its specialized form
		if(p.getModel() instanceof Node) {
			Node model = (Node)p.getModel();
			if(
					model.getElement() 
					instanceof Class
			) {
				classSel = (Class)model.getElement();
				name = ClassHandler.buildFullyQualifiedName(classSel);
			}
			else if(model.getElement() instanceof Operation) {
				opSel = (Operation)model.getElement();
				classSel = opSel.getClass_();
				name = OperationHandler.buildFullyQualifiedName(opSel);
			}
			else if(model.getElement() instanceof Property) {
				propSel = (Property)model.getElement();
				name = PropertyHandler.buildFullyQualifiedName(propSel);
			}
			else if(model.getElement() instanceof Package) {
				packSel = (Package)model.getElement();
				name = PackageHandler.buildFullyQualifiedName(packSel);
			}
		}
		else if(p.getModel() instanceof DiagramImpl) {
			EObject el = ((DiagramImpl)p.getModel()).getElement();
			if(el instanceof Package) {
				packSel = (Package)el;
				name = PackageHandler.buildFullyQualifiedName(packSel);
			}
		}
		// From this element, we resolve a full name
		/*
		if(classSel!=null) {

		}
		else if(propSel!=null) {
			name = PropertyHandler.buildFullyQualifiedName(propSel);
		}
		else if(opSel!=null) {
			name += '#' + opSel.getName();
		}
		else if(packSel!=null) {
			name = PackageHandler.buildFullyQualifiedName(packSel);
		}
		 */
		// From the element name we get the corresponding tool
		IElementHandling elH = getElementHandler(name);
		return elH;
	}

	/**
	 * Shows the java element in view specified by viewId
	 */
	/*
	@SuppressWarnings("restriction")
	public void show(final IJavaElement element, String viewId){
		// get hold of the view javadoc/declaration view
		AbstractInfoView infoView = (AbstractInfoView)
		this.getSite().getPage().findView(viewId);

		// get hold of the computeInput protected method, and invoke it.
		// returns the text to be set into the view.
		Method computeInput;
		try {
			computeInput = AbstractInfoView.class.getDeclaredMethod(
					"computeInput", 
					Object.class
			);
			computeInput.setAccessible(true);
			String source = (String) computeInput.invoke(infoView, element);

			// set the IJavaElement into the view.
			Field fCurrentViewInput =
				AbstractInfoView.class.getDeclaredField("fCurrentViewInput");
			fCurrentViewInput.setAccessible(true);
			fCurrentViewInput.set(infoView, element);

			// set the text into the view
			Method doSetInput =
				AbstractInfoView.class.getDeclaredMethod(
						"doSetInput", 
						Object.class
				);
			doSetInput.setAccessible(true);
			doSetInput.invoke(infoView, source);
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		}
	}
	*/

	/** Diagram and model files removal runnable */
	class FilesRemover implements IRunnableWithProgress {

		public void run(IProgressMonitor monitor)
		throws InvocationTargetException, InterruptedException {
			IResource modelResource = 
				creator.getModelHandler().getLatestWorkspaceResource();
			IResource classDiagramResource = 
				creator.getModelHandler().getClassDiagramWorkspaceResource();			
			try {
				if(classDiagramResource!=null) {
					classDiagramResource.delete(true, monitor);
				}
				if(modelResource!=null) {
					modelResource.delete(true, monitor);
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}

		}

	}

	@Override
	public void closeEditor(boolean save) {
		if((listeners!=null)&&(editingDomain!=null)) {
			Iterator<String> domains = 
				listeners.keySet().iterator();
			String domain = null;
			while(domains.hasNext()) {
				domain = domains.next();
				if(domain!=null) {
					ResourceSetListener listener = 
						listeners.get(domain);
					editingDomain.removeResourceSetListener(listener);
				}
			}
		}
		if(editPolicies!=null) {
			Iterator<EditPart> parts = editPolicies.keySet().iterator();
			EditPart part = null;
			EditPolicy policy = null;
			while(parts.hasNext()) {
				part = parts.next();
				if(part!=null) {
					policy = editPolicies.get(part);
					if(policy!=null) {
						part.removeEditPolicy(policy);
					}
				}
			}
		}
		super.closeEditor(save);
	}

	@Override
	public void dispose() {
		super.dispose();
		if((listeners!=null)&&(editingDomain!=null)) {
			Iterator<String> domains = 
				listeners.keySet().iterator();
			String domain = null;
			while(domains.hasNext()) {
				domain = domains.next();
				if(domain!=null) {
					ResourceSetListener listener = 
						listeners.get(domain);
					editingDomain.removeResourceSetListener(listener);
				}
			}
		}
		if(editPolicies!=null) {
			Iterator<EditPart> parts = editPolicies.keySet().iterator();
			EditPart part = null;
			EditPolicy policy = null;
			while(parts.hasNext()) {
				part = parts.next();
				if(part!=null) {
					policy = editPolicies.get(part);
					if(policy!=null) {
						part.removeEditPolicy(policy);
					}
				}
			}
		}
		try {
			creator.getSourceWorkbenchWindow().run(
					false, 
					false, 
					new FilesRemover()
			);
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void init(IEditorSite site, IEditorInput input) 
	throws PartInitException {
		super.init(site, input);
		factory = new UMLEditPartFactory();
		listeners = new Hashtable<String, ResourceSetListener>();
		editPolicies = new Hashtable<EditPart, EditPolicy>();
		getSite().getWorkbenchWindow().getSelectionService()
		.addSelectionListener(this);
		getSite().setSelectionProvider(this);
		if(!initialized) {
			initialized = true;
		}
		else {
			String name = new String();
			IElementHandling el =
				creator.getModelHandler().getElementHandler(name);
			if(el instanceof IPackageHandling) {
				IPackageHandling pack = (IPackageHandling)el;
				EditionHandler.getEditionReceiver().edit(
						pack.getJavaElement(), 
						creator.getSourceWorkbenchWindow(), 
						creator.getSourceViewId()
				);
			}
		}
	}

	@Override
	public void selectionChanged(IWorkbenchPart part, ISelection selection) {
		super.selectionChanged(part, selection);
		if((part.equals(getEditorSite().getPart()))&&(creator!=null)) {
			IWorkbenchWindow window = creator.getSourceWorkbenchWindow();
			// If we have a structured selection, 
			if((selection instanceof StructuredSelection)&&(window!=null)) {
				IWorkbenchPage page = window.getActivePage();
				StructuredSelection sel = (StructuredSelection)selection;
				// Then we get the first selected element
				Object first = sel.getFirstElement();
				// If it is a graphical edit part, 
				if(first instanceof EditPart) {
					// Then we specialize it and try to get a handler for this 
					// edit part
					EditPart p = (EditPart)first;
					lastSelectedElementHandler = 
						findHandler(p);
					ensureEditPolicy(p, lastSelectedElementHandler);
					// If we have a handler
					if((lastSelectedElementHandler!=null)) {
						IType tp = null;
						IJavaElement el = null;
						if(
								lastSelectedElementHandler 
								instanceof IMemberHandling<? ,?>
						) {
							// The we try to specialize it and display the 
							// source
							IMemberHandling<?, ?> memH = 
								(IMemberHandling<?, ?>)
								lastSelectedElementHandler;
							IClassifierHandling<?, ?> tpH = null;
							IElementHandling cont = memH;
							while(
									(
											!(
													cont 
													instanceof 
													IClassifierHandling<?,?>
											)
									)
									&&(
											cont instanceof 
											IContainableElementHandling<?, ?>
									)
							) {
								cont = 
									((IContainableElementHandling<?, ?>)cont)
									.getContainerHandler();
							}
							if(cont instanceof IClassifierHandling<?, ?>) {
								tpH = (IClassifierHandling<?, ?>)cont;
								try {
									tp = 
										tpH.getModelHandler().getJavaProject()
										.findType(
												tpH.getFullName()
										);
									if(
											(memH instanceof IAttributeHandling)
											&&(tp!=null)
									) {
										el = tp.getField(memH.getSimpleName());
									}
									else if(
											(memH instanceof IMethodHandling)
											&&(tp!=null)
									) {
										//el = tp.getM;
									}
									else if(memH.equals(tpH)) {
										el = tpH.getJavaElement();
									}
									else if(
											memH 
											instanceof 
											IClassifierHandling<?, ?>
									) {
										//el = tpH;
									}
								} catch (JavaModelException e) {
									UMLDiagramEditorPlugin.getInstance()
									.logError(
											"Unable find Java Element for " 
											+ memH, 
											e
									);
								}
							}
						}
						else if(
								lastSelectedElementHandler 
								instanceof IPackageHandling
						) {
							IPackageHandling packH = 
								((IPackageHandling)lastSelectedElementHandler);
							IModelHandling modelH = packH.getModelHandler();
							if(
									(modelH!=null)
									/*&&(
											!modelH.getFullName().equals(
													packH.getFullName()
											)
									)
									 */
							){
								el = packH.getJavaElement();
							}
						}
						StructuredSelection javaSelection = null;
						IWorkbenchPart vPart = null;
						if(el!=null) {
							javaSelection = new StructuredSelection(el);
							vPart = page.findView(creator.getSourceViewId());
							// show(el, org.eclipse.ui.internal.views.);
							if(
									(vPart!=null)
									&&(
											!vPart.getSite()
											.getSelectionProvider()
											.getSelection()
											.equals(javaSelection)
									)
							) {	
								vPart.getSite().getSelectionProvider()
								.setSelection(
										javaSelection
								);
								// vPart.setFocus();
								// this.getDiagramEditPart().activate();
								// vPart.setFocus();
								/*
								vPart.getSite().getSelectionProvider()
								.setSelection(
										javaSelection
								);
								vPart.setFocus();
								*/
								/*
								vPart.getSite().
								vPart.setFocus();
								try {
									wait(200);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								this.setFocus();
								*/
							}
						}
					}
				}
			}
		}
	}

	public void addSelectionChangedListener(
			ISelectionChangedListener listener
	) {
		
	}

	public ISelection getSelection() {
		ISelection sel = null;
		if(lastSelectedElementHandler instanceof IASTNodeHandling<?, ?>) {
			IASTNodeHandling<?, ?> astNodeH = 
				(IASTNodeHandling<?, ?>)lastSelectedElementHandler;
			new StructuredSelection(astNodeH.getJavaElement());
		}
		return sel;
	}

	public void removeSelectionChangedListener(
			ISelectionChangedListener listener
	) {
		
	}

	public void setSelection(ISelection selection) {
		this.setSelection(selection);
	}
}